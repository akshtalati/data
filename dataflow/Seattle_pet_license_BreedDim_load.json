{
	"name": "Seattle_pet_license_BreedDim_load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable4",
						"type": "DatasetReference"
					},
					"name": "sourceStg",
					"description": "Import data from Stage table PET_LICENSE_STAGE"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable7",
						"type": "DatasetReference"
					},
					"name": "BreedDimMaxId",
					"description": "Import Data from Breed Dim"
				},
				{
					"name": "sourceBreedDim",
					"description": "Import Data from ds_Demo_SCHEMA_BREED_DIM"
				}
			],
			"sinks": [
				{
					"name": "sinkBreedDim",
					"description": "Export Data to SEATTLE_SCHEMA_BREED_DIM"
				}
			],
			"transformations": [
				{
					"name": "SourceDataWithSK",
					"description": "Custom Cross join on 'sourceStg' and 'BreedDimMaxId'"
				},
				{
					"name": "aggregateBreedKeys",
					"description": "Aggregate data by 'SPECIES, PRIMARYBREED, SECONDARYBREED, MAXBREEDSK' producing Columns"
				},
				{
					"name": "joinToTarget",
					"description": "Left Outer Join on aggregateBreedKey and SourceBreedDim"
				},
				{
					"name": "filterExistingRows",
					"description": "Filter rows using expression on column 'SPECIES_NAME, PRIMARY_BREED_NAME,SECONDARY_BREED_NAME'"
				},
				{
					"name": "surrogateKey",
					"description": "Adding new key RowNum starting from 1 with step 1"
				},
				{
					"name": "DerivedColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"59\")",
				"}",
				"source(output(",
				"          ARREST_KEY as string,",
				"          ARREST_DATE as string,",
				"          PD_CD as string,",
				"          PD_DESC as string,",
				"          KY_CD as string,",
				"          OFNS_DESC as string,",
				"          LAW_CODE as string,",
				"          LAW_CAT_CD as string,",
				"          ARREST_BORO as string,",
				"          ARREST_PRECINCT as string,",
				"          JURISDICTION_CODE as string,",
				"          AGE_GROUP as string,",
				"          PERP_SEX as string,",
				"          PERP_RACE as string,",
				"          X_COORD_CD as string,",
				"          Y_COORD_CD as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          NEW_GEOREFERENCED_COLUMN as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStg",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK FROM DEMO_SCHEMA.BREED_DIM',",
				"     format: 'query') ~> BreedDimMaxId",
				"source(output(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> sourceBreedDim",
				"sourceStg, BreedDimMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SourceDataWithSK",
				"SourceDataWithSK aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
				"aggregateBreedKeys, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinToTarget",
				"joinToTarget filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filterExistingRows",
				"filterExistingRows keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(BREED_SK = MAXBREEDSK + RowNum,",
				"          DI_LOAD_DT = currentTimestamp(),",
				"          DI_JOB_ID = $DI_JOB_ID) ~> DerivedColumns",
				"DerivedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
				"          SPECIES_NAME = SPECIES,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT",
				"     ),",
				"     format: 'table') ~> sinkBreedDim"
			]
		}
	}
}